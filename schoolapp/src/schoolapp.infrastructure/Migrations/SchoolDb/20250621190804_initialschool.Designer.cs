// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using schoolapp.Infrastructure.Data;

#nullable disable

namespace schoolapp.Infrastructure.Migrations.SchoolDb
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20250621190804_initialschool")]
    partial class initialschool
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("school")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartmentSupportStaff", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("integer")
                        .HasColumnName("departments_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.HasKey("DepartmentsId", "StaffId")
                        .HasName("pk_department_support_staff");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_department_support_staff_staff_id");

                    b.ToTable("department_support_staff", "school");
                });

            modelBuilder.Entity("DepartmentTeacher", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("integer")
                        .HasColumnName("departments_id");

                    b.Property<int>("TeachersId")
                        .HasColumnType("integer")
                        .HasColumnName("teachers_id");

                    b.HasKey("DepartmentsId", "TeachersId")
                        .HasName("pk_department_teacher");

                    b.HasIndex("TeachersId")
                        .HasDatabaseName("ix_department_teacher_teachers_id");

                    b.ToTable("department_teacher", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.AcademicTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_academic_terms");

                    b.HasIndex("AcademicYearId")
                        .HasDatabaseName("ix_academic_terms_academic_year_id");

                    b.ToTable("academic_terms", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_academic_years");

                    b.ToTable("academic_years", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.ClassRoomSubject", b =>
                {
                    b.Property<int>("ClassRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("class_room_id");

                    b.Property<int>("SchoolSubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("school_subject_id");

                    b.Property<bool>("Elective")
                        .HasColumnType("boolean")
                        .HasColumnName("elective");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("ClassRoomId", "SchoolSubjectId")
                        .HasName("pk_classroom_subjects");

                    b.HasIndex("SchoolSubjectId")
                        .HasDatabaseName("ix_classroom_subjects_school_subject_id");

                    b.ToTable("classroom_subjects", "academics");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.SchoolSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("CreditHours")
                        .HasColumnType("integer")
                        .HasColumnName("credit_hours");

                    b.Property<string>("Desc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("desc");

                    b.Property<bool>("Elective")
                        .HasColumnType("boolean")
                        .HasColumnName("elective");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subject_name");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_school_subjects");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_school_subjects_school_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_school_subjects_teacher_id");

                    b.ToTable("school_subjects", "academics");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<bool>("Elective")
                        .HasColumnType("boolean")
                        .HasColumnName("elective");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<double?>("FinalGrade")
                        .HasColumnType("double precision")
                        .HasColumnName("final_grade");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("withdrawal_date");

                    b.Property<string>("WithdrawalReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("withdrawal_reason");

                    b.HasKey("Id")
                        .HasName("pk_student_subjects");

                    b.HasIndex("AcademicYearId")
                        .HasDatabaseName("ix_student_subjects_academic_year_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_student_subjects_student_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_student_subjects_subject_id");

                    b.ToTable("student_subjects", "academics");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.ClassGrades.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer")
                        .HasColumnName("grade_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_class_rooms");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_class_rooms_grade_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_class_rooms_teacher_id");

                    b.ToTable("class_rooms", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.ClassGrades.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<double>("MinimumGradePerCompulsorySubject")
                        .HasColumnType("double precision")
                        .HasColumnName("minimum_grade_per_compulsory_subject");

                    b.Property<double>("MinimumOverallGradeForPromotion")
                        .HasColumnType("double precision")
                        .HasColumnName("minimum_overall_grade_for_promotion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id")
                        .HasName("pk_grades");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_grades_school_id");

                    b.ToTable("grades", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Departments.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentHead")
                        .HasColumnType("integer")
                        .HasColumnName("department_head");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Exams.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("Grade")
                        .HasColumnType("double precision")
                        .HasColumnName("grade");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StudentSubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("student_subject_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_assessment");

                    b.HasIndex("StudentSubjectId")
                        .HasDatabaseName("ix_assessment_student_subject_id");

                    b.ToTable("assessment", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalId")
                        .HasColumnType("text")
                        .HasColumnName("national_id");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text")
                        .HasColumnName("other_names");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Salutation")
                        .HasColumnType("text")
                        .HasColumnName("salutation");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_parents");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_parents_school_id");

                    b.ToTable("parents", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("class_room_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<int?>("CurrentGradeId")
                        .HasColumnType("integer")
                        .HasColumnName("current_grade_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int?>("EnrollmentYearId")
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_year_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graduation_date");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalId")
                        .HasColumnType("text")
                        .HasColumnName("national_id");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text")
                        .HasColumnName("other_names");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reg_number");

                    b.Property<string>("Salutation")
                        .HasColumnType("text")
                        .HasColumnName("salutation");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("withdrawal_date");

                    b.Property<string>("WithdrawalReason")
                        .HasColumnType("text")
                        .HasColumnName("withdrawal_reason");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("ClassRoomId")
                        .HasDatabaseName("ix_students_class_room_id");

                    b.HasIndex("CurrentGradeId")
                        .HasDatabaseName("ix_students_current_grade_id");

                    b.HasIndex("EnrollmentYearId")
                        .HasDatabaseName("ix_students_enrollment_year_id");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_students_school_id");

                    b.ToTable("students", "people");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.StudentParent", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ParentType")
                        .HasColumnType("integer")
                        .HasColumnName("parent_type");

                    b.HasKey("ParentId", "StudentId")
                        .HasName("pk_student_parent");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_student_parent_student_id");

                    b.ToTable("student_parent", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.SupportStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Designation")
                        .HasColumnType("text")
                        .HasColumnName("designation");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalId")
                        .HasColumnType("text")
                        .HasColumnName("national_id");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text")
                        .HasColumnName("other_names");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("RegNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reg_no");

                    b.Property<string>("Salutation")
                        .HasColumnType("text")
                        .HasColumnName("salutation");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("StaffNumber")
                        .HasColumnType("text")
                        .HasColumnName("staff_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_support_staffs");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_support_staffs_school_id");

                    b.ToTable("support_staffs", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalId")
                        .HasColumnType("text")
                        .HasColumnName("national_id");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text")
                        .HasColumnName("other_names");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("RegNo")
                        .HasColumnType("text")
                        .HasColumnName("reg_no");

                    b.Property<string>("Salutation")
                        .HasColumnType("text")
                        .HasColumnName("salutation");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TeacherId")
                        .HasColumnType("text")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_teachers");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_teachers_school_id");

                    b.ToTable("teachers", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("HomePage")
                        .HasColumnType("text")
                        .HasColumnName("home_page");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("schoolname");

                    b.Property<int>("SchoolType")
                        .HasColumnType("integer")
                        .HasColumnName("school_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_schools");

                    b.ToTable("schools", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.SchoolSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGroupOfSchools")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group_of_schools");

                    b.Property<int>("ParentSchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_school_id");

                    b.Property<int>("SchoolType")
                        .HasColumnType("integer")
                        .HasColumnName("school_type");

                    b.Property<bool>("UseSingleName")
                        .HasColumnType("boolean")
                        .HasColumnName("use_single_name");

                    b.Property<bool>("UseStreams")
                        .HasColumnType("boolean")
                        .HasColumnName("use_streams");

                    b.HasKey("Id")
                        .HasName("pk_school_settings");

                    b.HasIndex("ParentSchoolId")
                        .IsUnique()
                        .HasDatabaseName("ix_school_settings_parent_school_id");

                    b.ToTable("school_settings", "school");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.StudentAcademics.AcademicRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("class_room_id");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer")
                        .HasColumnName("grade_id");

                    b.Property<int>("NewGradeId")
                        .HasColumnType("integer")
                        .HasColumnName("new_grade_id");

                    b.Property<double>("OverallGrade")
                        .HasColumnType("double precision")
                        .HasColumnName("overall_grade");

                    b.Property<int?>("PreviousGradeId")
                        .HasColumnType("integer")
                        .HasColumnName("previous_grade_id");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("promotion_date");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_academic_record");

                    b.HasIndex("AcademicYearId")
                        .HasDatabaseName("ix_academic_record_academic_year_id");

                    b.HasIndex("ClassRoomId")
                        .HasDatabaseName("ix_academic_record_class_room_id");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_academic_record_grade_id");

                    b.HasIndex("NewGradeId")
                        .HasDatabaseName("ix_academic_record_new_grade_id");

                    b.HasIndex("PreviousGradeId")
                        .HasDatabaseName("ix_academic_record_previous_grade_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_academic_record_student_id");

                    b.ToTable("academic_record", "school");
                });

            modelBuilder.Entity("DepartmentSupportStaff", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_support_staff_departments_departments_id");

                    b.HasOne("schoolapp.Domain.Entities.People.SupportStaff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_support_staff_support_staffs_staff_id");
                });

            modelBuilder.Entity("DepartmentTeacher", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_teacher_departments_departments_id");

                    b.HasOne("schoolapp.Domain.Entities.People.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_teacher_teachers_teachers_id");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.AcademicTerm", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.Academics.AcademicYear", "AcademicYear")
                        .WithMany("Terms")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_terms_academic_years_academic_year_id");

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.ClassRoomSubject", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_subjects_class_rooms_class_room_id");

                    b.HasOne("schoolapp.Domain.Entities.Academics.SchoolSubject", "SchoolSubject")
                        .WithMany("GradeSubjects")
                        .HasForeignKey("SchoolSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_subjects_school_subjects_school_subject_id");

                    b.Navigation("ClassRoom");

                    b.Navigation("SchoolSubject");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.SchoolSubject", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_school_subjects_schools_school_id");

                    b.HasOne("schoolapp.Domain.Entities.People.Teacher", null)
                        .WithMany("SubjectsQualified")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_school_subjects_teachers_teacher_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.StudentSubject", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.Academics.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_subjects_academic_years_academic_year_id");

                    b.HasOne("schoolapp.Domain.Entities.People.Student", "Student")
                        .WithMany("EnrolledSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_subjects_students_student_id");

                    b.HasOne("schoolapp.Domain.Entities.Academics.SchoolSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_subjects_school_subjects_subject_id");

                    b.Navigation("AcademicYear");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.ClassGrades.ClassRoom", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.Grade", "Grade")
                        .WithMany("ClassRooms")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_rooms_grades_grade_id");

                    b.HasOne("schoolapp.Domain.Entities.People.Teacher", "ClassTeacher")
                        .WithMany("ClassesResponsibleFor")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_class_rooms_teachers_teacher_id");

                    b.Navigation("ClassTeacher");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.ClassGrades.Grade", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Exams.Assessment", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.Academics.StudentSubject", "StudentSubject")
                        .WithMany("Assessments")
                        .HasForeignKey("StudentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assessment_student_subjects_student_subject_id");

                    b.Navigation("StudentSubject");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Parent", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parents_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Student", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_students_class_rooms_class_room_id");

                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.Grade", "CurrentGrade")
                        .WithMany()
                        .HasForeignKey("CurrentGradeId")
                        .HasConstraintName("fk_students_grades_current_grade_id");

                    b.HasOne("schoolapp.Domain.Entities.Academics.AcademicYear", "EnrollmentYear")
                        .WithMany()
                        .HasForeignKey("EnrollmentYearId")
                        .HasConstraintName("fk_students_academic_years_enrollment_year_id");

                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_schools_school_id");

                    b.Navigation("ClassRoom");

                    b.Navigation("CurrentGrade");

                    b.Navigation("EnrollmentYear");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.StudentParent", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.People.Parent", "Parent")
                        .WithMany("StudentParents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_parent_parents_parent_id");

                    b.HasOne("schoolapp.Domain.Entities.People.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_parent_students_student_id");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.SupportStaff", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_staffs_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Teacher", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.SchoolSetting", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.School", "School")
                        .WithOne("ExtraSettings")
                        .HasForeignKey("schoolapp.Domain.Entities.SchoolSetting", "ParentSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_school_settings_schools_parent_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.StudentAcademics.AcademicRecord", b =>
                {
                    b.HasOne("schoolapp.Domain.Entities.Academics.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_record_academic_years_academic_year_id");

                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_record_class_rooms_class_room_id");

                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_record_grades_grade_id");

                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.Grade", "NewGrade")
                        .WithMany()
                        .HasForeignKey("NewGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_record_grades_new_grade_id");

                    b.HasOne("schoolapp.Domain.Entities.ClassGrades.Grade", "PreviousGrade")
                        .WithMany()
                        .HasForeignKey("PreviousGradeId")
                        .HasConstraintName("fk_academic_record_grades_previous_grade_id");

                    b.HasOne("schoolapp.Domain.Entities.People.Student", "Student")
                        .WithMany("AcademicHistory")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_record_students_student_id");

                    b.Navigation("AcademicYear");

                    b.Navigation("ClassRoom");

                    b.Navigation("Grade");

                    b.Navigation("NewGrade");

                    b.Navigation("PreviousGrade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.AcademicYear", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.SchoolSubject", b =>
                {
                    b.Navigation("GradeSubjects");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.Academics.StudentSubject", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.ClassGrades.ClassRoom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.ClassGrades.Grade", b =>
                {
                    b.Navigation("ClassRooms");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Parent", b =>
                {
                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Student", b =>
                {
                    b.Navigation("AcademicHistory");

                    b.Navigation("EnrolledSubjects");

                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.People.Teacher", b =>
                {
                    b.Navigation("ClassesResponsibleFor");

                    b.Navigation("SubjectsQualified");
                });

            modelBuilder.Entity("schoolapp.Domain.Entities.School", b =>
                {
                    b.Navigation("ExtraSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
